@{
    ViewData["Title"] = "Najbliza lokacija";
    Layout = null;
}
<!DOCTYPE html>
<html>
<head>
    <title>Pronadi najblizu radnju</title>
    <script type="text/javascript" src="https://www.bing.com/api/maps/mapcontrol?key=AgpR-BTwc8GvJtFYwyCGSblGVEHPqKP9je91grup-A40EOcY_Xytf5qaqafy5Pv_&callback=loadMapScenario" async defer></script>
    <style>
        body {
            background-color: #fff;
            margin: 0;
            padding: 0;
            font-family: Courier New, monospace;
        }

        #map {
            height: 500px;
            margin-top: 20px;
            margin-left: 20px;
            margin-right: 20px;
        }

        #locationInput {
            margin-top: 20px;
            margin-left: 350px;
            width: 800px;
            height: 30px;
        }

        #findButton {
            height: 30px;
            width: 100px;
            font-size: 18px;
            background-color: #c19770;
            color: white;
            cursor: pointer;
        }

            #findButton:hover {
                opacity: 0.8;
            }

        #result {
            margin-top: 20px;
            margin-left: 350px;
        }

        h1 {
            text-align: center;
            margin: 20px 0;
        }
    </style>
</head>
<body>
    <h1>Pronađi najbližu poslovnicu</h1>
    <div id="map"></div>
    <input type="text" id="locationInput" placeholder="Unesite svoju adresu">
    <button id="findButton" onclick="findNearestStore()">Pronađi</button>
    <div id="result"></div>

    <script type="text/javascript">
        var map, userLocation, infobox;
        var storeLocations = [
            { name: "Kulina Bana 31", address: "71000 Sarajevo", coordinates: [43.8597, 18.4322] },
            { name: "Džemala Bijedića 160", address: "71000 Sarajevo", coordinates: [43.8553, 18.3864] },
            { name: "Ložionička 16", address: "71000 Sarajevo", coordinates: [43.8547, 18.4337] },
            { name: "Trg djece Sarajevo 1", address: "71000 Sarajevo", coordinates: [43.8521, 18.4084] }
        ];

        function loadMapScenario() {
            map = new Microsoft.Maps.Map(document.getElementById('map'), {
                credentials: 'AgpR-BTwc8GvJtFYwyCGSblGVEHPqKP9je91grup-A40EOcY_Xytf5qaqafy5Pv_',
                center: new Microsoft.Maps.Location(43.8563, 18.4131),
                zoom: 13
            });
        }

        function findNearestStore() {
            var userAddress = document.getElementById("locationInput").value;

            // Clear previous markers
            map.entities.clear();

            // Geocode user's address
            var geocodeRequest = "https://dev.virtualearth.net/REST/v1/Locations?q=" + encodeURIComponent(userAddress) + "&key=AgpR-BTwc8GvJtFYwyCGSblGVEHPqKP9je91grup-A40EOcY_Xytf5qaqafy5Pv_";

            fetch(geocodeRequest)
                .then(response => response.json())
                .then(data => {
                    if (data.resourceSets.length > 0 && data.resourceSets[0].resources.length > 0) {
                        var coordinates = data.resourceSets[0].resources[0].point.coordinates;
                        userLocation = new Microsoft.Maps.Location(coordinates[0], coordinates[1]);
                        map.setView({ center: userLocation, zoom: 15 });
                        var pushpin = new Microsoft.Maps.Pushpin(userLocation, { title: userAddress });
                        map.entities.push(pushpin);

                        // Calculate nearest store
                        var nearestStore = calculateNearestStore(userLocation);
                        displayNearestStore(nearestStore);
                    } else {
                        alert('Location not found.');
                    }
                })
                .catch(error => {
                    console.error('Error geocoding:', error);
                    alert('An error occurred. Please try again.');
                });
        }

        function calculateNearestStore(userLocation) {
            var nearestStore = storeLocations[0];
            var shortestDistance = calculateDistance(userLocation.latitude, userLocation.longitude, nearestStore.coordinates[0], nearestStore.coordinates[1]);

            for (var i = 1; i < storeLocations.length; i++) {
                var distance = calculateDistance(userLocation.latitude, userLocation.longitude, storeLocations[i].coordinates[0], storeLocations[i].coordinates[1]);
                if (distance < shortestDistance) {
                    shortestDistance = distance;
                    nearestStore = storeLocations[i];
                }
            }

            return nearestStore;
        }

        function calculateDistance(lat1, lon1, lat2, lon2) {
            var R = 6371; // Radius of the Earth in km
            var dLat = deg2rad(lat2 - lat1);
            var dLon = deg2rad(lon2 - lon1);
            var a =
                Math.sin(dLat / 2) * Math.sin(dLat / 2) +
                Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) *
                Math.sin(dLon / 2) * Math.sin(dLon / 2);
            var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
            var distance = R * c;
            return distance;
        }

        function deg2rad(deg) {
            return deg * (Math.PI / 180);
        }

        function displayNearestStore(nearestStore) {
            var resultElement = document.getElementById("result");
            resultElement.innerHTML = "Najbliza prodavnica je na adresi: " + nearestStore.name + ", " + nearestStore.address;

            var storeLocation = new Microsoft.Maps.Location(nearestStore.coordinates[0], nearestStore.coordinates[1]);
            var storePin = new Microsoft.Maps.Pushpin(storeLocation, { title: nearestStore.name });
            map.entities.push(storePin);

            map.setView({ center: storeLocation, zoom: 15 });
        }
    </script>
</body>
</html>
